# Generated by ariadne-codegen
# Source: ./documents

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ModelServiceTypes, ModelTypes


class QueryModels(BaseModel):
    models: Optional["QueryModelsModels"]


class QueryModelsModels(BaseModel):
    results: Optional[List["QueryModelsModelsResults"]]


class QueryModelsModelsResults(BaseModel):
    name: str
    type: Optional[ModelTypes]
    service_type: Optional[ModelServiceTypes] = Field(alias="serviceType")
    model: Optional[str]
    description: Optional[str]
    available_on: Optional[List[Optional[str]]] = Field(alias="availableOn")
    features: Optional["QueryModelsModelsResultsFeatures"]
    metadata: Optional["QueryModelsModelsResultsMetadata"]


class QueryModelsModelsResultsFeatures(BaseModel):
    key_features: Optional[List[Optional[str]]] = Field(alias="keyFeatures")
    strengths: Optional[List[Optional[str]]]
    use_cases: Optional[List[Optional[str]]] = Field(alias="useCases")


class QueryModelsModelsResultsMetadata(BaseModel):
    multilingual: Optional[bool]
    multimodal: Optional[bool]
    knowledge_cutoff: Optional[Any] = Field(alias="knowledgeCutoff")
    prompt_cost_per_million: Optional[float] = Field(alias="promptCostPerMillion")
    completion_cost_per_million: Optional[float] = Field(
        alias="completionCostPerMillion"
    )
    embeddings_cost_per_million: Optional[float] = Field(
        alias="embeddingsCostPerMillion"
    )
    reranking_cost_per_million: Optional[float] = Field(alias="rerankingCostPerMillion")
    context_window_tokens: Optional[int] = Field(alias="contextWindowTokens")
    max_output_tokens: Optional[int] = Field(alias="maxOutputTokens")


QueryModels.model_rebuild()
QueryModelsModels.model_rebuild()
QueryModelsModelsResults.model_rebuild()
